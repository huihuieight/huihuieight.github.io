<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>混合app中js调用C#如何得到返回值</title>
      <link href="/2020/08/01/js%E8%B0%83%E7%94%A8Csharp%E5%A6%82%E4%BD%95%E5%BE%97%E5%88%B0%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
      <url>/2020/08/01/js%E8%B0%83%E7%94%A8Csharp%E5%A6%82%E4%BD%95%E5%BE%97%E5%88%B0%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>本文所用的混合app，采用xamarin.forms编写手机端代码，react编写web端代码，react编译后的代码文件放入xamarin的android assets文件夹中，用的本地html的方式。</p><a id="more"></a><p>由于本人还是个新手，以下所述难免有错误的地方，对知识的理解上也还很浅显，在此只是记录自己在学习新知识解决一些问题时的思路历程。</p><p>场景：本文所用的混合app，采用xamarin.forms编写手机端代码，react编写web端代码，react编译后的代码文件放入xamarin的android assets文件夹中，用的本地html的方式。</p><p>显示html内容用的是webview，因为要实现JavaScript调用C#代码，所以用自定义呈现器HybridWebView，参考微软官方文档<a href="https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/app-fundamentals/custom-renderer/hybridwebview，自定义webview。" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/app-fundamentals/custom-renderer/hybridwebview，自定义webview。</a></p><p>自定义webview的实现过程直接看文档，此处略过，由于原文档例子中只有JavaScript调用C#代码，没有实现在调用C#代码后返回值的效果，所以在这里记录理解部分源代码和自己探索出得到返回值的过程（知识点讲解部分略过，详细记录思考过程）。</p><p><strong>从下面几个过程来解决这个问题：</strong></p><p><strong>1、react代码中编写调用C#的函数</strong></p><p><code>let aaa = window[&quot;invokeCSharpAction&quot;](&quot;sqlite&quot;,jsonStr);</code></p><p>invokeCSharpAction即为C#中的函数，因为在编译react语句时，invokeCSharpAction是没有定义的，普通的定义写法会报错，所以考虑用JavaScript字符串调用函数的方式，参考 <a href="https://blog.csdn.net/xingmei_ok/article/details/82901068" target="_blank" rel="noopener">https://blog.csdn.net/xingmei_ok/article/details/82901068</a> ，函数在js里面可以被保存在对象中，因此通过对象的属性访问,调用字符串方法。</p><ul><li><p>全局函数声明会变成全局对象的属性。全局对象在进入执行上下文前创建的一个唯一的对象。在浏览器运行环境里，全局对象就是window对象</p></li><li><p>属性访问可以使用 <strong>点标记法     或者括号标记法</strong>。其中使用点访问需要标识符，二括号访问使用的是标识符对应的字符串     </p><p>因此使用window对象和括号标记法写调用C#的函数。</p></li></ul><p><strong>2、xamarin中自定义webview的执行过程</strong></p><p><strong>1）首先看最终的测试语句（xamarin forms的公共代码）：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">HybridWebViewPage</span> : <span class="title">ContentPage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HybridWebViewPage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        hybridWebView.RegisterAction(data =&gt; DisplayAlert(<span class="string">"Alert"</span>, <span class="string">"Hello "</span> + data, <span class="string">"OK"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RegisterAction：</strong>注册的action</p><p><strong>data：</strong>从JavaScript传递来的参数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegisterAction</span>(<span class="params">Action&lt;<span class="keyword">string</span>&gt; callback</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    action = callback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InvokeAction</span>(<span class="params"><span class="keyword">string</span> data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="literal">null</span> || data == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    action.Invoke(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>InvokeAction：</strong>android执行的函数</p><p><strong>2）JavaScript调用android的函数（xamarin forms的android代码）</strong></p><p>从 JavaScript 调用 C# 的过程在每个平台上完全相同：（官网文档原话）</p><ul><li>自定义呈现器创建本机 Web 控件并加载 <code>HybridWebView.Uri</code> 属性指定的 HTML 文件。</li><li>加载网页后，自定义呈现器将 <code>invokeCSharpAction</code> JavaScript 函数注入到网页中。</li><li>当用户输入其名称并单击 HTML <code>button</code> 元素时，会调用 <code>invokeCSCode</code> 函数，并随之调用 <code>invokeCSharpAction</code> 函数。</li><li><code>invokeCSharpAction</code> 函数调用自定义呈现器中的方法，该方法随之调用 <code>HybridWebView.InvokeAction</code> 方法。</li><li><code>HybridWebView.InvokeAction</code> 方法调用已注册的 <code>Action</code>。</li></ul><p>根据官方关于HybridWebView的描述，自己对示例进行了单步调试，大致了解程序运行的顺序后，自己开始对程序进行修改，从而达到自己想要的功能，该部分具体的webview执行过程原理见官方文档，不进行赘述。</p><p><strong>3、实现自己需要的功能（得到C#的返回值给JavaScript函数）</strong></p><p><strong>1）更改<code>hybridWebView.RegisterAction(data =&gt; DisplayAlert(&quot;Alert&quot;, &quot;Hello &quot; + data, &quot;OK&quot;));</code></strong></p><p>这里的功能是弹出对话框，测试JavaScript调用C#的DisplayAlert，并且能传递参数data；</p><p>因为我的目的是要得到返回值，所以首先测试将这里的语句增加一个return,因为Action是void，所以callback需要改为有返回值的Func；</p><p>更改部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public void RegisterAction(Func&lt;string,string&gt; callback)</span><br><span class="line">  &#123;action &#x3D; callback;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hybridWebView.RegisterAction(data &#x3D;&gt; return data;)</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">InvokeAction</span>(<span class="params"><span class="keyword">string</span> data</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span> || data == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"-1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> action(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过测试，到这一步是能够有返回值的，然后继续往后执行：</p><p><strong>JSBridge.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">JavascriptInterface</span>]</span><br><span class="line">    [<span class="meta">Export(<span class="meta-string">"invokeAction"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">InvokeAction</span>(<span class="params"><span class="keyword">string</span> data</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        HybridWebViewRenderer hybridRenderer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hybridWebViewRenderer != <span class="literal">null</span> &amp;&amp; hybridWebViewRenderer.TryGetTarget(<span class="keyword">out</span> hybridRenderer))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> temp =((HybridWebView)hybridRenderer.Element).InvokeAction(data);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-1"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码执行到这里，发现也是能返回值的，说明C#中的函数执行是正常的，问题可能出在混合app中js和C#的交互部分，继续往后找：</p><p><strong>HybridWebViewRenderer.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">assembly: ExportRenderer(typeof(HybridWebView), typeof(HybridWebViewRenderer))</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CustomRenderer.Droid</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HybridWebViewRenderer</span> : <span class="title">WebViewRenderer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">string</span> JavascriptFunction = <span class="string">"function invokeCSharpAction(data)&#123;jsBridge.invokeAction(data);&#125;"</span>;</span><br><span class="line">        Context _context;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HybridWebViewRenderer</span>(<span class="params">Context context</span>) : <span class="title">base</span>(<span class="params">context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _context = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnElementChanged</span>(<span class="params">ElementChangedEventArgs&lt;WebView&gt; e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnElementChanged(e);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e.OldElement != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Control.RemoveJavascriptInterface(<span class="string">"jsBridge"</span>);</span><br><span class="line">                ((HybridWebView)Element).Cleanup();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e.NewElement != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Control.SetWebViewClient(</span><br><span class="line">                    <span class="keyword">new</span> JavascriptWebViewClient(<span class="keyword">this</span>, <span class="string">$"javascript: <span class="subst">&#123;JavascriptFunction&#125;</span>"</span>));</span><br><span class="line">                Control.AddJavascriptInterface(<span class="keyword">new</span> JSBridge(<span class="keyword">this</span>), <span class="string">"jsBridge"</span>);</span><br><span class="line">                Control.LoadUrl(<span class="string">$"file:///android_asset/Content/<span class="subst">&#123;((HybridWebView)Element).Uri&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"><span class="keyword">bool</span> disposing</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (disposing)</span><br><span class="line">            &#123;</span><br><span class="line">                ((HybridWebView)Element).Cleanup();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">base</span>.Dispose(disposing);</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是关键，重要的代码是这里：</p><p><code>const string JavascriptFunction = &quot;function invokeCSharpAction(data){jsBridge.invokeAction(data);}&quot;;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Control.SetWebViewClient(new JavascriptWebViewClient(this, $&quot;javascript: &#123;JavascriptFunction&#125;&quot;));</span><br><span class="line">Control.AddJavascriptInterface(new JSBridge(this), &quot;jsBridge&quot;);</span><br><span class="line">Control.LoadUrl($&quot;file:&#x2F;&#x2F;&#x2F;android_asset&#x2F;Content&#x2F;&#123;((HybridWebView)Element).Uri&#125;&quot;);</span><br></pre></td></tr></table></figure><p><strong>2）测试交互的方法</strong></p><p>百度后：android与js交互的方式（包括三种）<a href="https://blog.csdn.net/u012808234/article/details/53583927" target="_blank" rel="noopener">https://blog.csdn.net/u012808234/article/details/53583927</a></p><p>从这篇文章中发现<strong>mWebView.addJavascriptInterface(new JSObject(), “myObj”);  **和</strong>mWebView.setWebViewClient**，</p><ul><li><p>（猜测1）这里我注意到两点，SetWebViewClient和AddJavascriptInterface，我这里的代码也有这两个，猜测是不是因为两种方式都加入的原因，所以我注释了SetWebViewClient方法，单独测试AddJavascriptInterface。</p><p>另一句话改为Control.LoadUrl(string.Format(“javascript: {0}”, JavascriptFunction));</p><p>执行之后发现最终显示中还是没有返回值；</p><p>这应该就不是两个方法并存的原因。</p><p><strong>测试过程参考了文末的文章。</strong></p></li><li><p>（猜测2）看网上别人用addJavascriptInterface就能得到返回值，我想到直接从html中的script方法着手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function invokeCSCode(data) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        log(&quot;Sending Data:&quot; + data);</span><br><span class="line">        let aaa &#x3D; invokeCSharpAction(&quot;234&quot;,data);</span><br><span class="line">        &#x2F;&#x2F;let aaa &#x3D; jsBridge.invokeAction(&quot;234&quot;, data);</span><br><span class="line">        log(aaa);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (err) &#123;</span><br><span class="line">        log(err);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里测试了两个语句</p><p>let aaa = invokeCSharpAction(“234”,data);  //undefined<br>//let aaa = jsBridge.invokeAction(“234”, data); //有返回值</p><p>可以看出 jsBridge.invokeAction 执行是有结果的，那问题就出在 invokeCSharpAction的执行过程上。</p></li><li><p>（猜测3）invokeCSharpAction的执行过程中出现某些疏漏</p><p><code>const string JavascriptFunction = &quot;function invokeCSharpAction(data){jsBridge.invokeAction(data);}&quot;;</code></p><p><code>Control.SetWebViewClient(new JavascriptWebViewClient(this, $&quot;javascript: {JavascriptFunction}&quot;));</code></p><p>与invokeCSharpAction相关的是第一句，const string JavascriptFunction =，</p><p>而Control.SetWebViewClient的一个参数用到了JavascriptFunction </p><p>突然醒悟到：function invokeCSharpAction(data)中invokeCSharpAction是一个function，会执行jsBridge.invokeAction(data);</p><p>而jsBridge.invokeAction(data)在上面的测试中是有返回值的，这里少了一个return，将jsBridge.invokeAction(data)的值返回，至此，JavaScript调用C#能够得到返回值。</p></li></ul><p>JSBridge的交互机制我还没有理解很深，本篇只是在原例子中稍微更改了一些代码实现自己想要的功能，从应用中再去慢慢理解。</p><p>参考文章：</p><p><a href="https://www.cnblogs.com/zjmsky/p/7247683.html" target="_blank" rel="noopener">Xamarin.Form中WebView调用JS代码和JS代码调用客户端程序</a></p><p><a href="https://github.com/xamarin/docs-archive/tree/master/Recipes/android/controls/webview/call_csharp_from_javascript" target="_blank" rel="noopener">https://github.com/xamarin/docs-archive/tree/master/Recipes/android/controls/webview/call_csharp_from_javascript</a></p><p><a href="https://forums.xamarin.com/discussion/102444/xamarin-forms-webview-control-how-to-call-c-from-javascript" target="_blank" rel="noopener">https://forums.xamarin.com/discussion/102444/xamarin-forms-webview-control-how-to-call-c-from-javascript</a></p>]]></content>
      
      
      <categories>
          
          <category> mobile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> JavaScript </tag>
            
            <tag> C# </tag>
            
            <tag> xamarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome安装React-devtools</title>
      <link href="/2020/06/20/Chrome%E5%AE%89%E8%A3%85React%20developer%20tools/"/>
      <url>/2020/06/20/Chrome%E5%AE%89%E8%A3%85React%20developer%20tools/</url>
      
        <content type="html"><![CDATA[<p><strong><code>git clone https://github.com/facebook/react-devtools.git</code></strong>；</p><p>需要注意的是react-devtools源码在v3分支上：<strong><code>git checkout v3</code></strong></p><a id="more"></a><h6 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装<strong>Git</strong></h6><h6 id="2、git-clone源码到本地"><a href="#2、git-clone源码到本地" class="headerlink" title="2、git clone源码到本地"></a>2、git clone源码到本地</h6><p>在一个空文件夹中，右键选择Git Bash Here，进入Git界面，输入<br><strong><code>git clone https://github.com/facebook/react-devtools.git</code></strong>，该指令是从github下载react-devtools到本地，下载完成后能看到空文件夹中多了一个react-devtools文件夹；</p><h6 id="3、使用淘宝镜像"><a href="#3、使用淘宝镜像" class="headerlink" title="3、使用淘宝镜像"></a>3、使用淘宝镜像</h6><p>在刚刚的git窗口中输入<strong><code>cd react-devtools</code></strong>，（或者关闭原先的git窗口，直接双击进入react-devtools文件夹，右键选择Git Bash Here），这一步是保证在react-devtools文件夹执行git指令，同时会发现该文件夹下的文件很少（原因在第4点）。<br>使用淘宝镜像，会在安装依赖时快速一点。<br><strong><code>npm --registry https://registry.npm.taobao.org install</code></strong></p><h6 id="4、切换到v3分支"><a href="#4、切换到v3分支" class="headerlink" title="4、切换到v3分支"></a>4、切换到v3分支</h6><p>通过github的react-devtools源码readme.md可以看到The source code for the v3 of the extension can be found in the v3 branch.源文件在v3分支上，输入指令<strong><code>git checkout v3</code></strong>，可以看到本地文件夹中的文件变的很多，说明获取到了正确的源码；</p><h6 id="5、安装依赖"><a href="#5、安装依赖" class="headerlink" title="5、安装依赖"></a>5、安装依赖</h6><p>输入<strong>npm install</strong>，安装依赖，等待一会；</p><h6 id="6、打包扩展程序"><a href="#6、打包扩展程序" class="headerlink" title="6、打包扩展程序"></a>6、打包扩展程序</h6><p><strong><code>npm run build:extension:chrome</code></strong></p><h6 id="7、Chrome加载扩展程序"><a href="#7、Chrome加载扩展程序" class="headerlink" title="7、Chrome加载扩展程序"></a>7、Chrome加载扩展程序</h6><p>打包成功后，进入chrome浏览器，右上角“更多工具”–&gt;扩展程序–&gt;加载已解压的扩展程序，选择react-devtools -&gt; shells -&gt; chrome -&gt; build -&gt; <strong>unpacked</strong>文件夹，加载完成后浏览器右上角会出现react的图标，重启浏览器就能进行react的调试工具了。</p>]]></content>
      
      
      <categories>
          
          <category> Tools使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>testFirstBlog</title>
      <link href="/2020/06/07/testFirstBlog/"/>
      <url>/2020/06/07/testFirstBlog/</url>
      
        <content type="html"><![CDATA[<p>P20:进阶-React-Redux介绍和安装</p><p>React-Redux这是一个React生态中常用组件，它可以简化Redux流程，这节课我们就重新建立一个项目Demo02，然后会利用几节课的时间用React-redux把之前的TodoList案例重新实现一遍。如果你公司不用这个插件，其实没必要耗费时间学。但是作为一篇文章，必须保证知识尽可能完整。（需要注意的是概念：React、Redux、React-redux是三个不同的东西）</p><a id="more"></a><p>React项目初始化</p><p>因为以前已经安装了脚手架工具creat-react-app，所以现在直接在项目的终端中输入下面的命令。</p><p>create-react-app demo02<br>cd demo02<br>npm start</p><p>经过上面的三个命令，应该可以在浏览器中出现下面的界面（出现画面说明我们项目初始化完成）。</p><p>react-redux课程</p><p>安装完成后，删除一些没有必要的样式和代码，在/src目录下，只留一个index.js文件，其余的全部删除，这时候项目已经不能启动起来了，这很正常。</p><p>安装react-redux</p><p>项目初始化好后，直接使用npm在命令行安装React-redux，这个网络的不同安装时间也有所不同。</p><p>npm install –save react-redux</p><p>视频录制视时安装的版本是7.1.0版本，你学习的时候可能跟我有所不同，如有不同，可以到Github上查询最新API文档。<br>修改代码，让他跑起来</p><p>目前项目还是没办法跑起来的，需要建立一个TodoList.js的组件。项目代码如下:</p><p>有了TodoList.js后，我们引入到index.js文件下，然后修改代码如下:</p><p>这时候再在浏览器中预览，就会只输出一个JSPang的字样。虽然很丑，但是项目已经跑起来了。接下来我们编写一下render函数中的JSX页面（为了节省大家的时间，就不再使用antd了）。</p><p>这时候界面应该发生了一点变化,这样基本的项目我们就算初始化完成了，接下来我们按原来的Redux方式作一个store出来。<br>Redux的安装和使用（复习）</p><p>先在终端中安装Redux包，因为是一个新项目，所以需要重新安装。</p><p>npm install –save redux</p><p>首先创建一个store文件夹，在/store下创建一个index.js文件,并写入下面代码：</p><p>目前我们还没有reducer，所以我们要创建reducer.js文件，代码如下:</p><p>然后再TodoList.js中的构造函数constructor中使用。</p><p>写完这段，到浏览器中保存看一下，应该就得到store中的值了，到目前为止，我们只是安装了React-Redux,但是还并没有进行使用，这节课只要是把基本的环境搭建好和复习一下以前的知识。下节课我们再逐步学习React-Redux的知识，小伙伴们先不要着急，先把开发环境搭建好吧。</p><p>转载自：<a href="https://jspang.com/detailed?id=48#toc273，技术胖的博客。" target="_blank" rel="noopener">https://jspang.com/detailed?id=48#toc273，技术胖的博客。</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/02/hello-world/"/>
      <url>/2020/06/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
